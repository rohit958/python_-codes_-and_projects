				#OOP Concepts
----------------------------------------------------------------------------
#Data Abstraction -
"""In Python, abstraction can be achieved by using abstract classes and interfaces.
   A class that consists of one or more abstract method is called the abstract class. 
   Abstract methods do not contain their implementation. 
   Abstract class can be inherited by the subclass and abstract method gets its definition in the subclass. """

    from abc import ABC  
    class ClassName(ABC):  


----------------------------------------------------------------------------
#Class-
 """Class in Python is a logical grouping of data and functions. 
	It gives the freedom to create data structures that contains arbitrary content and hence easily accessible."""
 
 # Example file for working with classes
class myClass():
  def method1(self):
      print("Guru99")
        
  def method2(self,someString):    
      print("Software Testing:" + someString)
  
      
def main():           
  # exercise the class methods
  c = myClass () #c is an object
  c.method1()
  c.method2(" Testing is fun")
  
if __name__== "__main__":
  main()
 
 
 
----------------------------------------------------------------------------
 
#Inheritance-
 """Inheritance is a feature used in object-oriented programming; it refers to defining a new class with less or no modification to an existing class. 
	The new class is called derived class and from one which it inherits is called the base. Python supports inheritance; it also supports multiple inheritances.
	A class can inherit attributes and behavior methods from another class called subclass or heir class. """
 
 # Example file for working with classes
class myClass():
  def method1(self):
      print("Guru99")
        
  
class childClass(myClass):
  #def method1(self):
        #myClass.method1(self);
        #print ("childClass Method1")
        
  def method2(self):
        print("childClass method2")     
         
def main():           
  # exercise the class methods
  c2 = childClass()
  c2.method1()
  #c2.method2()

if __name__== "__main__":
  main()
 
 #constructor starts with __(double underscore and  __init__) The __init__() is called dunder init.

 def __init__(self, name):
        self.name = name

 
----------------------------------------------------------------------
 
#Data Encapsulation-
 
 """A class is an example of encapsulation. A class bundles data and methods into a single unit.
    And a class provides the access to its attributes via methods."""
 
 #creating private objects
 #By convention, you can define a private attribute by prefixing a single underscore (_):
instance._attribute
 
#Name mangling with double underscores
instance.__attribute
 

------------------------------------------------------------------------
 
#Polymorphism-

""" Polymorphism is a very important concept in programming. 
It refers to the use of a single type entity (method, operator or object) to represent different types in different scenarios."""

"+"operator is used to perform arithmetic addition operation.

len() function


 
 
 
 
-----------------------------------------------------------------------
 
 """In programming, implicit is often used to refer to something that's done for you by other code behind the scenes. 
 Explicit is the manual approach to accomplishing the change you wish to have by writing out the instructions to be done explicitly."""
 
 -----------------------------------------------------------------------
 
 #types of Inheritences in Python
 
 There are five types of inheritance in python programming:

1). Single inheritance

#syntax_of_single_inheritance

class Brands:               #parent_class
    brand_name_1 = "Amazon"
    brand_name_2 = "Ebay"
    brand_name_3 = "OLX"
    
class Products(Brands):       #child_class
    prod_1 = "Online Ecommerce Store"
    prod_2 = "Online Store"
    prod_3 = "Online Buy Sell Store"
    
obj_1 = Products()          #Object_creation
print(obj_1.brand_name_1+" is an "+obj_1.pr

 -----------------------------------------------------------------------

2). Multiple inheritances

# Base class1
class Mother:
    mothername = ""
    def mother(self):
        print(self.mothername)
 
# Base class2
class Father:
    fathername = ""
    def father(self):
        print(self.fathername)
 
# Derived class
class Son(Mother, Father):
    def parents(self):
        print("Father :", self.fathername)
        print("Mother :", self.mothername)
 
# Driver's code
s1 = Son()
s1.fathername = "RAM"
s1.mothername = "SITA"
s1.parents()

 -----------------------------------------------------------------------
3). Multilevel inheritance

class Grandfather:
 
    def __init__(self, grandfathername):
        self.grandfathername = grandfathername
 
# Intermediate class
class Father(Grandfather):
    def __init__(self, fathername, grandfathername):
        self.fathername = fathername
 
        # invoking constructor of Grandfather class
        Grandfather.__init__(self, grandfathername)
 
# Derived class
class Son(Father):
    def __init__(self,sonname, fathername, grandfathername):
        self.sonname = sonname
 
        # invoking constructor of Father class
        Father.__init__(self, fathername, grandfathername)
 
    def print_name(self):
        print('Grandfather name :', self.grandfathername)
        print("Father name :", self.fathername)
        print("Son name :", self.sonname)
 
#  Driver code
s1 = Son('Prince', 'Rampal', 'Lal mani')
print(s1.grandfathername)
s1.print_name()
 
 -----------------------------------------------------------------------


4). Hierarchical inheritance

# Base class
class Parent:
      def func1(self):
          print("This function is in parent class.")
 
# Derived class1
class Child1(Parent):
      def func2(self):
          print("This function is in child 1.")
 
# Derivied class2
class Child2(Parent):
      def func3(self):
          print("This function is in child 2.")
  
# Driver's code
object1 = Child1()
object2 = Child2()
object1.func1()
object1.func2()
object2.func1()
object2.func3()

 -----------------------------------------------------------------------

5). Hybrid inheritance

# hybrid inheritance
 
 
class School:
     def func1(self):
         print("This function is in school.")
  
class Student1(School):
     def func2(self):
         print("This function is in student 1. ")
  
class Student2(School):
     def func3(self):
         print("This function is in student 2.")
  
class Student3(Student1, School):
     def func4(self):
         print("This function is in student 3.")
  
# Driver's code
object = Student3()
object.func1()
object.func2()

-------------------------------------------------------------------------------------