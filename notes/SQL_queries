--sql
--concat alternative
SELECT Name || '(' || SUBSTR(Occupation, 1, 1) || ')'
FROM OCCUPATIONS
ORDER BY Name;

SELECT 'There are a total of ' || Count(Name) || ' ' || LOWER(Occupation) || 's.'
FROM Occupations
GROUP BY Occupation
ORDER BY Count(Name), Occupation;


----------------------------------------------------------------------------


---pivot TABLE
/*
You can use the PIVOT and UNPIVOT relational operators to change a table-valued expression into another table. 
PIVOT rotates a table-valued expression by turning the unique values from one column in the expression into multiple columns in the output. 
And PIVOT runs aggregations where they're required on any remaining column values that are wanted in the final output. 
UNPIVOT carries out the opposite operation to PIVOT by rotating columns of a table-valued expression into column values.*/

SELECT
    [Doctor], [Professor], [Singer], [Actor]
FROM
(
    SELECT ROW_NUMBER() OVER (PARTITION BY OCCUPATION ORDER BY NAME) [RowNumber], * FROM OCCUPATIONS--partioning
) AS tempTable
PIVOT --pivoting
(
    MAX(NAME) FOR OCCUPATION IN ([Doctor], [Professor], [Singer], [Actor])
) AS pivotTable


----------------------------------------------------------------------------


/*Row number function is a window function that assigns a sequential integer to each row within the partition of a result set.
 The row number starts with 1 for the first row in each partition.
 */
 
 ROW_NUMBER() OVER (
    [PARTITION BY partition_expression, ... ]
    ORDER BY sort_expression [ASC | DESC], ...
)

/*
PARTITION BY
The PARTITION BY clause divides the result set into partitions (another term for groups of rows). The ROW_NUMBER() function is applied to each partition separately and reinitialized the row number for each partition.

The PARTITION BY clause is optional. If you skip it, the ROW_NUMBER() function will treat the whole result set as a single partition.

ORDER BY
The ORDER BY clause defines the logical order of the rows within each partition of the result set. The ORDER BY clause is mandatory because the ROW_NUMBER() function is order sensitive.
*/


----------------------------------------------------------------------------

--*traingle with SQL CODE
***** --from 20
****
***
**
*

SELECT REPEAT('* ', @NUMBER := @NUMBER - 1) --mysql
FROM information_schema.tables, (SELECT @NUMBER:=21) t LIMIT 20

DECLARE @i INT = 20 --mysql
WHILE (@i > 0) 
BEGIN
   PRINT REPLICATE('* ', @i) 
   SET @i = @i - 1
END


select rpad('*', x,' *') from  --oracle sql
( SELECT LEVEL x FROM DUAL CONNECT BY LEVEL <= 40 Order by Level desc ) where mod(x,2) = 0;

----------------------------------------------------------------------------

--*traingle with SQL CODE
*
**
***
****
*****--upto 20

SELECT REPEAT('* ', @NUMBER := @NUMBER + 1) --mysql
FROM information_schema.tables, (SELECT @NUMBER:=0) t LIMIT 20;

----------------------------------------------------------------------------

--prime numbers upto 1000 

--select all the numbers till 1000 in the tblnums
with recursive tblnums
as (
	select 2 as nums
	union all
	select nums+1 
	from tblnums
	where nums<1000)
	
select group_concat(tt.nums order by tt.nums separator '&')  as nums
from tblnums tt
where not exists 
	#the num should not be divisible by any number less than it
	( select 1 from tblnums t2 
	where t2.nums <= tt.nums/2 and mod(tt.nums,t2.nums)=0) 
	
--------------------------------------------------------------------------------------------------------------------------------------------------------	
/*
	
			JOIN																									UNION
JOIN combines data from many tables based on a matched condition between them.			SQL combines the result-set of two or more SELECT statements.
It combines data into new columns.														It combines data into new rows
Number of columns selected from each table may not be same.								Number of columns selected from each table should be same.
Datatypes of corresponding columns selected from each table can be different.			Datatypes of corresponding columns selected from each table should be same.
It may not return distinct columns.														It returns distinct rows.
*/
--------------------------------------------------------------------------------------------------------------------------------------------------------

SQL query optimization is crucial for improving the performance of database queries. Here are some common techniques to optimize SQL queries:

1. **Use Indexes:**
   - Indexes can significantly speed up query performance by providing quick access to specific rows. Ensure that tables are properly indexed based on the columns used in the WHERE, JOIN, and ORDER BY clauses.

2. **Update Statistics:**
   - Regularly update the statistics of database tables and indexes. Accurate statistics help the query optimizer make better decisions about the most efficient way to execute a query.

3. **Optimize JOIN Operations:**
   - Minimize the use of unnecessary JOIN operations. Choose the most appropriate type of JOIN (INNER, LEFT, RIGHT, etc.) based on the specific requirements of the query.

4. **Limit the Number of Columns in SELECT Statements:**
   - Only select the columns that are needed for the query. Avoid using `SELECT *` when unnecessary, as it can lead to fetching more data than required.

5. **Use WHERE Clause Effectively:**
   - Place conditions in the WHERE clause to filter rows as early as possible in the query execution process. This reduces the amount of data that needs to be processed.

6. **Avoid SELECT DISTINCT Unless Necessary:**
   - Using SELECT DISTINCT can be resource-intensive. Only use it when necessary, and consider alternative approaches like GROUP BY if appropriate.

7. **Use EXISTS and IN Instead of DISTINCT:**
   - Use EXISTS and IN clauses when checking for the existence of records rather than using DISTINCT. These clauses are often more efficient.

8. **Avoid Using Functions in WHERE Clause:**
   - Using functions in the WHERE clause can prevent the query optimizer from utilizing indexes. Try to avoid using functions on columns in the WHERE clause, if possible.

9. **Optimize Subqueries:**
   - Evaluate and optimize subqueries. Consider using JOINs or EXISTS clauses instead of subqueries when appropriate.

10. **Partitioning and Sharding:**
    - For large tables, consider partitioning or sharding the data. This distributes the data across multiple physical or logical partitions, improving query performance.

11. **Use Query Hints:**
    - Some database systems allow the use of query hints to influence the query optimizer's decisions. However, use these judiciously, as they may affect the portability of your SQL code across different database systems.

12. **Avoid SELECT * in Subqueries:**
    - If using a subquery, avoid using `SELECT *`. Instead, explicitly list the columns needed. This helps in reducing unnecessary data retrieval.

13. **Cache Query Results:**
    - If applicable, consider caching the results of frequently executed queries. This can be especially beneficial for read-heavy workloads.

14. **Review and Optimize Joins and Subqueries:**
    - Carefully review the execution plan of your queries. Identify performance bottlenecks in terms of joins and subqueries, and optimize them accordingly.

15. **Consider Materialized Views:**
    - Materialized views store precomputed results of queries, which can be especially useful for complex and frequently used queries. Keep them up to date for accurate results.

Always remember that the effectiveness of these techniques can vary based on the specific database system being used, the schema design, and the characteristics of the data. Regularly monitoring and fine-tuning queries is essential for maintaining optimal performance over time.