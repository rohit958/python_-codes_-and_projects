sample csv files link-https://sample-videos.com/download-sample-csv.php
------------------------------------------------------------------------
--complex sql queries-mysql
------------------------------------------------------------------------
c = 'H'
thickness=4
for i in range(thickness):
    print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).center(thickness)).ljust(thickness*6))
-------------------------------------------------------------------------------------------------------------	


-- storage info in redshift	
select
  sum(capacity)/1024 as capacity_gbytes,
  sum(used)/1024 as used_gbytes,
  (sum(capacity) - sum(used))/1024 as free_gbytes
from
  stv_partitions where part_begin=0;
 
 
 -------------------------------------------------------------------------------------------------------------
--substring
 
 SELECT  substring(District,1,3) as shortName FROM world.city  limit 10;
 
 
------------------------------------------------------------------------------------------------------------- 
 
----countris in each continent
 SELECT continent,count(*) FROM world.country
group by Continent;


-------------------------------------------------------------------------------------------------------------

--subquery
select * from world.country
where Population >(Select avg(Population)from world.country);


-------------------------------------------------------------------------------------------------------------

--query to find table using specific columnName
SELECT * FROM information_schema.columns
WHERE
	column_name like '%ID%'
    and TABLE_SCHEMA like'%sakila%';
 
  -------------------------------------------------------------------------------------------------------------
SELECT  substring(District,1,3) as shortName FROM world.city  limit 10;

SELECT continent,count(*) FROM world.country
group by Continent;

  -------------------------------------------------------------------------------------------------------------
--oldest employee in each designation
 SELECT EmployeeId, LastName, FirstName, Title, ReportsTo, max(DATE()- substring(BirthDate,1,11)) as max_age , 
 HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email
FROM Employee
group by Title ;

-------------------------------------------------------------------------------------------------------------
--subquery
select * from world.country
where Population >(Select avg(Population)from world.country);


SELECT * FROM world.city limit 100;
-------------------------------------------------------------------------------------------------------------
 --window functions
 

SELECT Direction, "Year", Date, Weekday, Country, Commodity, Transport_Mode, Measure, Cumulative,
avg(Value) over(PARTITION BY "Year") as year_avg
FROM effects_of_covid
group by "Year" ;

-------------------------------------------------------------------------------------------------------------
 
----transpose
 
 

 
-------------------------------------------------------------------------------------------------------------

----self joins
 
 -- sql predicts the nbature of join itself



 
 
 
-------------------------------------------------------------------------------------------------------------
-- antijoin
 

 
 
 -------------------------------------------------------------------------------------------------------------
 
 ----quaify over ROW
 
 
 select ROW_NUMBER() over(PARTITION  by "Year") as year_number,"Year" ,Country, Commodity, Transport_Mode, value
 from effects_of_covid 
 group by "Year" 
 order by "Year" desc;
 
 ------------------------------------------------------------------------------------------------------------- 
 
 --rank function
 
SELECT rank() over(order by Age DESC)as actor_rank,"Index", "Year", Age, Name, Movie
FROM oscar_age_male_csv ;

 
 ------------------------------------------------------------------------------------------------------------- 

--window function-max age vs age of each employee in each title

--max()
SELECT EmployeeId, LastName, FirstName, Title, ReportsTo,DATE()- substring(BirthDate,1,11) as age,
max(DATE()- substring(BirthDate,1,11)) over(PARTITION by Title) as max_age 
FROM Employee e;

 --employees deptwise using row_number 
SELECT EmployeeId, LastName, FirstName, Title, ReportsTo,DATE()- substring(BirthDate,1,11) as age,
ROW_NUMBER() over(PARTITION  by Title)as dept_no
FROM Employee ;
 

--avg
SELECT Direction, "Year", Date, Weekday, Country, Commodity, Transport_Mode, Measure, Cumulative,
avg(Value) over(PARTITION BY "Year") as year_avg
FROM effects_of_covid
group by "Year" ;

 --row_number
create table temp_table as
SELECT EmployeeId, LastName, FirstName, Title, ReportsTo,DATE()- substring(BirthDate,1,11) as age,ROW_NUMBER() over(PARTITION  by Title)as dept_no
FROM Employee;

------------------------------------------------------------------------------------------------------------ 

/* partioned BY- work on specific cloumn use partioned by / in place of group by 
	order by-its used to sort the window result
*/

------------------------------------------------------------------------------------------------------------ 

/*
window funtions-
	rank()-ranks the row based on  cloumns value in window it can skip ranking
	
	dense_rank()-doesnt't skip the rankings
	
	ROW_NUMBER()-displays the number of a given row. 
	
	lead()-compares next rows
	
	lag()-compares previous rows
	
	Ntile-
	
	max()-maximum value over windowed cloumns
	
	avg()- average  value over windowed cloumns
	
	min()- minimum  value over windowed cloumns
	
	count()- counts  value over windowed cloumns
	
	for avg,max(),min,count() partioned by/order by
*/

 ------------------------------------------------------------------------------------------------------------- 
  -- 3rd highest salary  
	SELECT TOP 1 SALARY.
    FROM (
    SELECT DISTINCT TOP 3 SALARY.
    FROM tbl_Employees.
    ORDER BY SALARY DESC.
    ) RESULT.
    ORDER BY SALARY.




--using window functions
select et.* from(
select *, dense_rank() over(order by salary desc) as sal_rank from employee_txt )et 
WHERE et.sal_rank =3;


 ------------------------------------------------------------------------------------------------------------- 

`select Code,Name, Region, LifeExpectancy,Continent MAX(SurfaceArea) over (Partition By Continent) as max_area
 from  world.city ;
 
select * from  world.city
where Population >(select AVG(Population)from world.city ) ;


select count(*) from(
select ci.*,co.* from world.city ci 
 join world.country co 
on ci.CountryCode =co.Code)d

alter table world.city 
rename column population to city_population


select * from world.country c 
select * from world.city c2 

commit
select * from world.countrylanguage c 